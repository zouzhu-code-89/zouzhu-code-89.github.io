import{_ as s,c as i,o as a,a6 as e}from"./chunks/framework.BP9J8U3L.js";const E=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"document/services/python/多线程.md","filePath":"document/services/python/多线程.md"}'),n={name:"document/services/python/多线程.md"},l=e(`<p>Python3 线程中常用的两个模块为：</p><ul><li><strong>_thread</strong></li><li><strong>threading(推荐使用)</strong></li></ul><p>thread 模块已被废弃。用户可以使用 threading 模块代替。所以在 Python3 中不能再使用 &quot;thread&quot; 模块。为了兼容性，Python3 将 thread 重命名为 &quot;_thread&quot;。</p><h3 id="threading-创建线程" tabindex="-1">threading 创建线程 <a class="header-anchor" href="#threading-创建线程" aria-label="Permalink to &quot;threading 创建线程&quot;">​</a></h3><p>threading.Thread(target, args=(), kwargs={}, daemon=None) 创建 Thread 类的实例：</p><ul><li><code>target</code>：线程将要执行的目标函数。</li><li><code>args</code>：目标函数的参数，以元组形式传递。</li><li><code>kwargs</code>：目标函数的关键字参数，以字典形式传递。</li><li><code>daemon</code>：指定线程是否为守护线程。</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threading</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> time</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> print_numbers</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        time.sleep(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(i)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 创建线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> threading.Thread(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">target</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">print_numbers)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动线程</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.start()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 等待线程结束</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">thread.join()</span></span></code></pre></div><p>threading.Thread 类提供了以下方法与属性:</p><ol><li><p><strong><code>__init__(self, group=None, target=None, name=None, args=(), kwargs={}, *, daemon=None)</code>：</strong></p><ul><li>初始化<code>Thread</code>对象。</li><li><code>group</code>：线程组，暂时未使用，保留为将来的扩展。</li><li><code>target</code>：线程将要执行的目标函数。</li><li><code>name</code>：线程的名称。</li><li><code>args</code>：目标函数的参数，以元组形式传递。</li><li><code>kwargs</code>：目标函数的关键字参数，以字典形式传递。</li><li><code>daemon</code>：指定线程是否为守护线程。</li></ul></li><li><p><strong><code>start(self)</code>：</strong></p><ul><li>启动线程。将调用线程的<code>run()</code>方法。</li></ul></li><li><p><strong><code>run(self)</code>：</strong></p><ul><li>线程在此方法中定义要执行的代码。</li></ul></li><li><p><strong><code>join(self, timeout=None)</code>：</strong></p><ul><li>等待线程终止。默认情况下，<code>join()</code>会一直阻塞，直到被调用线程终止。如果指定了<code>timeout</code>参数，则最多等待<code>timeout</code>秒。</li></ul></li><li><p><strong><code>is_alive(self)</code>：</strong></p><ul><li>返回线程是否在运行。如果线程已经启动且尚未终止，则返回<code>True</code>，否则返回<code>False</code>。</li></ul></li><li><p><strong><code>getName(self)</code>：</strong></p><ul><li>返回线程的名称。</li></ul></li><li><p><strong><code>setName(self, name)</code>：</strong></p><ul><li>设置线程的名称。</li></ul></li><li><p><strong><code>ident</code>属性：</strong></p><ul><li>线程的唯一标识符。</li></ul></li><li><p><strong><code>daemon</code>属性：</strong></p><ul><li>线程的守护标志，用于指示是否是守护线程。</li></ul></li><li><p><strong><code>isDaemon()</code>方法：</strong></p></li></ol>`,9),t=[l];function p(o,d,h,r,c,k){return a(),i("div",null,t)}const u=s(n,[["render",p]]);export{E as __pageData,u as default};
