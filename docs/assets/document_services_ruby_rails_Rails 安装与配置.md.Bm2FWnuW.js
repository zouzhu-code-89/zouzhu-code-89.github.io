import{_ as s,c as i,o as l,a6 as a,b5 as e,b6 as n,b7 as p,b8 as t,b9 as r}from"./chunks/framework.DGW6KJB9.js";const A=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"document/services/ruby/rails/Rails 安装与配置.md","filePath":"document/services/ruby/rails/Rails 安装与配置.md"}'),h={name:"document/services/ruby/rails/Rails 安装与配置.md"},o=a('<h2 id="rails-安装与配置" tabindex="-1">Rails 安装与配置 <a class="header-anchor" href="#rails-安装与配置" aria-label="Permalink to &quot;Rails 安装与配置&quot;">​</a></h2><p>rails -v 查看 rails 版本</p><p>rails new testproject 创建项目</p><p>因为 rails 会默认帮我们生成一些以来，比如数据库之类的，所以创建项目后，最后 rails 默认会执行 run bundle install 这个动作，bundle 相当于管理项目的依赖包，类似于 npm ，因为镜像是国外镜像，bundle 起来非常的慢，可能就会直接导致项目创建失败，连接不到 rails 远程服务器</p><p>我们可以在运行 run bundle install 直接按 Ctrl + C 直接退出下载依赖的过程，Rails 依旧帮我们创建了项目，我们只需要替换成淘宝镜像源，然后在执行 build 命令就好了。</p><p>⇒ 项目根目录下有个 Gemfile 文件，这个文件是用来管理我们的 gem 依赖的，第一行显示的</p><p>source &#39;<a href="https://rubygems.org" target="_blank" rel="noreferrer">https://rubygems.org</a>&#39;</p><p>就是 gem 依赖得镜像源，是国外得网站，非常慢，我们可以替换成淘宝的镜像源</p><p>source &#39;<a href="https://ruby.taobao.org" target="_blank" rel="noreferrer">https://ruby.taobao.org</a>&#39;</p><p>然后我们需要重新运行 bundle install 重新下载依赖，我们也可以直接执行 bundle 默认情况下就是运行了 install 命令 ，这样我们就完成了 Rails 项目的建立，</p><p>下一步启动服务运行命令 ：-p 为端口号</p><p>~ rails server -p 4001</p><p>然后我们在浏览器访问 localhost:4001 就可以看到项目默认首页的模板文件了，</p><p><img src="'+e+'" alt="Untitled"></p><p>快速创建一个页面 :</p><p>使用 Rails 下面的子命令 generate 可以快速创建一个 controller 包括控制层，路由，视图层，测试控制层用力，scss 样式文件，插件等等...一站式搞定 。</p><p>~ Rails generate controller Welcome index</p><p><img src="'+n+`" alt="Untitled"></p><p>稍微修改下 controller，view，route 对应的 welcome 内容，替换掉上面默认的 rails 首页</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># app/controllers/welcome_controller.rb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> WelcomeController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> index</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># config/routes.rb</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Rails</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.application.routes.draw </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # root 是指向着首页位置</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  # welcome_controller.rb -&gt; def index 方法</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  root </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;welcome#index&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># app/views/welcome/index.html.erb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">this is homepage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p><img src="`+p+'" alt="Untitled"></p><p>app 下面就 Rails 下面最主要的目录，app 下面又分了很有子目录，它们都有着各自的功能</p><p>Rails MVC 设计模式 : View(用户界面) ←→ Controller(应用逻辑) ←→ Model(数据)</p><p>这是传统的设计模式，应用逻辑 controller 层，作为中间枢纽，将数据层和用户界面进行连接 。</p><p>文件目录说明 ：</p><ul><li>asstes 资源公共目录，图片资源，css 样式文件等等</li><li>controller 目录，就是 mvc 下面 c 的逻辑都要放到 controller 目录下面</li><li>helpers 目录主要是用来服务 mvc 下面 v(view) 这一层，view 端一些比较复杂的输出逻辑方法，需要单独的放在这个目录，它下面的文件与 controllers 下面的文件名称有一个命名的关联关系的。</li><li>mailers 目录是项目中所有需要发送 email 的业务逻辑，需要放在当前这个目录下面。</li><li>models 目录存放的就是 mvc 下面的 m，就是所有数据库层面的数据模型都要放在该目录下面。</li><li>views 目录就是存放视图层，对应着 mvc 下面的 v，它和 controller 拥有着对应关系，目录结构相同。</li></ul><p><img src="'+t+'" alt="Untitled"></p><p>根目录下面的公共目录介绍</p><ul><li>public 目录下面一般放着一些静态 html 模板文件，也可以像 assets 目录那样放置一些 images 图片，css ，js 文件，不过 rails 采用的独有的机制(资源管道组织方式)，实际上我们所有的静态资源都是放在 app/assets 这个目录下面，这个目录下面 rails 默认帮我们设置好了三个目录分别放置不同的资源。说明如果 asstes 里面没有则会查找 public 这个目录。</li><li>test 目录下面放着项目所有的测试用例，单元测试集成测试，这些所有的代码都要放在这个目录。</li><li>tmp 临时文件目录下面放置着当前的缓存，进程 id，session 这些数据。</li><li>vendor 目录放置着第三方文件资源的。</li><li>Gemfile 文件，项目当前所有依赖的 gem 文件都会定义在这个 Gemfile 里面，它是 bundle 这个 gem 所依赖的文件，平时需要添加一些第三方的 gem 支持，就要修改这个文件，之后我们就要重新运行 bundle 这个命令。</li><li>Gemfile.lock 文件，这个文件我们平时是不做修改的，这个文件实际是我们运行 bundle 命令后，bundle 自身内部维护的 gem 内部相互依赖关系的一个文件。</li><li>Rakefile 文件，默认情况下会加载 Rails 环境里面所有的 rake 任务，我们也可以自定一些加载其他的 rake 任务。</li></ul><p><img src="'+r+'" alt="Untitled"></p>',30),c=[o];function k(d,g,m,u,_,b){return l(),i("div",null,c)}const v=s(h,[["render",k]]);export{A as __pageData,v as default};
