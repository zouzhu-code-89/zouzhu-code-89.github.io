import{_ as i,c as a,o as n,a2 as t}from"./chunks/framework.DzQ5xTzt.js";const c=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"document/services/ruby/rails/Rails Setting 约定配置.md","filePath":"document/services/ruby/rails/Rails Setting 约定配置.md"}'),l={name:"document/services/ruby/rails/Rails Setting 约定配置.md"};function e(p,s,h,k,r,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h2 id="rails-setting-约定配置" tabindex="-1">Rails Setting 约定配置 <a class="header-anchor" href="#rails-setting-约定配置" aria-label="Permalink to &quot;Rails Setting 约定配置&quot;">​</a></h2><p><a href="https://ruby-china.github.io/rails-guides/configuring.html#configuring-active-job" target="_blank" rel="noreferrer">配置 Rails 应用 — Ruby on Rails Guides</a></p><h2 id="约定工程目录结构及功能" tabindex="-1">约定工程目录结构及功能 <a class="header-anchor" href="#约定工程目录结构及功能" aria-label="Permalink to &quot;约定工程目录结构及功能&quot;">​</a></h2><h3 id="concerns-通用公共逻辑目录" tabindex="-1">c<strong>oncerns 通用公共逻辑目录</strong> <a class="header-anchor" href="#concerns-通用公共逻辑目录" aria-label="Permalink to &quot;c**oncerns 通用公共逻辑目录**&quot;">​</a></h3><p>创建项目的时候，Rails 默认在 Controller，Models 都帮我们生成了 Concerns 这个目录，Rails 希望我们将一些通用的功能方法，封装成模块统一管理，需要的时候直接调用即可，例下面的结构则是做了一个案例，我们将 user_session 功能单独封装在 Concerns 里面 ：</p><ul><li>app → 所有的功能代码都在 App 目录里面 <ul><li>Controller → 控制层 <ul><li>concerns → 通用的代码封装的地方 <ul><li>user_session.rb → 我们自己封装的模块</li></ul></li></ul></li></ul></li></ul><p>然后可以在任意 Controller 中导入 include Concerns::UserSession 这个模块，这样当前的 Controller 以及子类都可以使用 UserSession 下面的所有方法了，因为声明了 helper_method ，所以我们可以在 view 层中使用 logged_in? | current_user 这两个方法了。</p><aside> 💡 include 模块后就可以使用模块内的所有方法，如果想要在 view 中使用这些方法，我们必须将我们想要在 view 中使用的方法声明为一个 helper 方法 。 </aside><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># app -&gt; controller -&gt; ApplicationController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ApplicationController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ActionController:Base</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	include</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Concerns</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">::</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">UserSession</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SessionsController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> ApplicationController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> create</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		@user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find_by</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">username:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:username</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">												 password:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> @user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			signin_user @user </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果账号正确，子类中则直接调用这个方法保存 session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			render </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">json:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				status:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;ok&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				msg:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">redirect_url:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> root_path}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			}</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Rails 都是采用路径约束来识别的，所以我们要定义一个 Concerns ，然后将代码</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 放在 Concerns 里面，以命名空间的形式.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Concerns</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# UserSession </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	module</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> UserSession</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# =================&gt; self.included &lt;==================</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 如果 UserSession 模块被 include 到目标类的时候，目标类就会执行当前</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 的这个方法，反向的将这两个方法声明为 helper 方法.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> self.included</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> base</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			base.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">class_eval</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				helper_method </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:logged_in?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				helper_method </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:current_user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 1.当用户登陆的时候，就将 User.id 保存到 session</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> signin_user</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			session[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:user_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> user.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 2.用户退出的时候，将 user_id 清空</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logout_user</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">			session[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:user_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> nil</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 3.判断用户是否有 user_id</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> logged_in</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			# 这里第一个感叹号(非)的作用是取反，</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">			# 第二个则是将返回的结果转为布尔类型 true、false</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			!!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">session[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:user_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">		# 4.如果有则赋值并返回 @current_user 对象，如果没有就返回 nil</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> current_user</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logged_in?</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">				@current_user </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> User</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">find</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(session[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:user_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">				# @current_user = @current_user || User.find(session[:user_id])</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			else</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">				nil</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">			end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">		end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div>`,11)]))}const E=i(l,[["render",e]]);export{c as __pageData,E as default};
