import{_ as s,c as a,o as i,a4 as n,ah as l}from"./chunks/framework.Dc3ngIYm.js";const u=JSON.parse('{"title":"Rails Routing 路由器","description":"","frontmatter":{},"headers":[],"relativePath":"document/services/rails/Rails Routing 路由器.md","filePath":"document/services/rails/Rails Routing 路由器.md"}'),p={name:"document/services/rails/Rails Routing 路由器.md"},e=n(`<h1 id="rails-routing-路由器" tabindex="-1">Rails Routing 路由器 <a class="header-anchor" href="#rails-routing-路由器" aria-label="Permalink to &quot;Rails Routing 路由器&quot;">​</a></h1><h1 id="第-1-章-rails-routing-路由器" tabindex="-1">第 1 章 Rails Routing 路由器 <a class="header-anchor" href="#第-1-章-rails-routing-路由器" aria-label="Permalink to &quot;第 1 章 Rails Routing 路由器&quot;">​</a></h1><h2 id="restful-curd-风格" tabindex="-1">RESTful CURD 风格 <a class="header-anchor" href="#restful-curd-风格" aria-label="Permalink to &quot;RESTful CURD 风格&quot;">​</a></h2><p>rails router.rb 路由配置文件中可以定义一些列的路由匹配的规则模式，如下列子列表所示</p><h3 id="route-resrouces-默认7种路由" tabindex="-1">Route Resrouces 默认7种路由 <a class="header-anchor" href="#route-resrouces-默认7种路由" aria-label="Permalink to &quot;Route Resrouces 默认7种路由&quot;">​</a></h3><p>下面 resources:books 一行代码 rails 默认帮控制层定义了 7 种路由，其实就是帮我们完成了 CURD (增删查改) 操作，如下表所示 ：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>resources :books</span></span>
<span class="line"><span></span></span>
<span class="line"><span>请求方式         URL                对应 active               作用</span></span>
<span class="line"><span>--------------------------------------------------------------------------</span></span>
<span class="line"><span>GET            /books/index        index                    显示book的列表页   </span></span>
<span class="line"><span>GET            /books/new          new                      显示book新建页面</span></span>
<span class="line"><span>GET            /books/3            show                     显示id=3的book</span></span>
<span class="line"><span>GET            /books/3/edit       edit                     显示id=3的book的编辑页面</span></span>
<span class="line"><span>PUT            /books/3            update                   对id=3的book进行修改(后面还会紧跟一大堆的参数)</span></span>
<span class="line"><span>POST           /books              create                   对books进行创建(后面也有一大堆参数)</span></span>
<span class="line"><span>DELETE         /books/3            destory                  对id=3的book进行删除操作</span></span>
<span class="line"><span></span></span>
<span class="line"><span>router,path       controller        params        active</span></span>
<span class="line"><span>--------------------------------------------------------</span></span>
<span class="line"><span>/books/index   =&gt; books#index       {}            index</span></span>
<span class="line"><span>/books/new     =&gt; books#new         {}            new</span></span>
<span class="line"><span>/books/3       =&gt; books#show        {id:3}        show</span></span>
<span class="line"><span>/books/3/edit  =&gt; books#edit        {id:3}        edit</span></span>
<span class="line"><span>/books/3       =&gt; books#update      {id:3}        update</span></span>
<span class="line"><span>/books         =&gt; books#create      {...}         create</span></span>
<span class="line"><span>/books/3       =&gt; books#destory     {id:3}        destory</span></span></code></pre></div><p>在 Rails router 中， 定义 books 结构，我们可以通过 rake routes 下面的命令查看所有的路由</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Rails.application.routes.draw do</span></span>
<span class="line"><span>  # 这里会生成七种路由.</span></span>
<span class="line"><span>  resources :books do</span></span>
<span class="line"><span>    collection do</span></span>
<span class="line"><span>      # 在这里生成第八种路由: GET:  /books/list</span></span>
<span class="line"><span>      get :list</span></span>
<span class="line"><span>    end</span></span>
<span class="line"><span>  end</span></span>
<span class="line"><span>end</span></span>
<span class="line"><span></span></span>
<span class="line"><span>---------------------------------------------------</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$ bundle exec rake routes</span></span></code></pre></div><p><img src="`+l+`" alt="Untitled"></p><h2 id="路由的一些列模式" tabindex="-1">路由的一些列模式 <a class="header-anchor" href="#路由的一些列模式" aria-label="Permalink to &quot;路由的一些列模式&quot;">​</a></h2><h3 id="跟路由-root" tabindex="-1">跟路由(root) <a class="header-anchor" href="#跟路由-root" aria-label="Permalink to &quot;跟路由(root)&quot;">​</a></h3><p>当我们不指定任何路径，默认会匹配到根目录 <a href="http://127.0.0.1/" target="_blank" rel="noreferrer">http://127.0.0.1/</a></p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;pages#main&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">root </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pages#main&#39;</span></span></code></pre></div><h3 id="自定义路由" tabindex="-1">自定义路由 <a class="header-anchor" href="#自定义路由" aria-label="Permalink to &quot;自定义路由&quot;">​</a></h3><p>router.rb 中允许我们自定义一个单个路由，可以是任何请求类型 get，post 等等...</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># GET /users/2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里有参数 id，我们可以在 controller 使用 params[:id] 获取这个参数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/users/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;users#show&#39;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/users/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =&gt; </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;users#show&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Routes 单个资源，有时候我们不需要传递 id, 比如用户自身的信息编辑页面</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># GET /profile</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;profile&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, to </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;user#show&#39;</span></span></code></pre></div><h3 id="约束参数-constraints" tabindex="-1">约束参数(constraints) <a class="header-anchor" href="#约束参数-constraints" aria-label="Permalink to &quot;约束参数(constraints)&quot;">​</a></h3><p>可以使用 constraints 约束参数，只有符合正则规则的参数才会被解析到 photos#show</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /photos/A12345</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;photos/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;photos#show&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">constraints:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">id:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">[A-Z]</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;--shiki-light-font-weight:bold;--shiki-dark-font-weight:bold;">\\d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">{5}</span><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">}</span></span></code></pre></div><h3 id="重定向-redirect" tabindex="-1">重定向(redirect) <a class="header-anchor" href="#重定向-redirect" aria-label="Permalink to &quot;重定向(redirect)&quot;">​</a></h3><p>使用 to: redirect 进行路由重定向</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/stories&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> redirect(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/articles&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><h3 id="命令路由" tabindex="-1">命令路由 <a class="header-anchor" href="#命令路由" aria-label="Permalink to &quot;命令路由&quot;">​</a></h3><p>命名路由使用 as 定义，然后通过这个 user 别名，框架帮我们生成了 user_* 一系列相关方法，例如下面的 user_path，user_url ... 方法可以帮我们返回一些路由相关的参数(相对路径，绝对路径，路由参数 id 等)，其实我们不定义这个 as ，rails 也会默认帮我们生成一个 users_show_* 别名 。</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/users/:id&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;users#show&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">as:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;user&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 补充注意:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 上面这种方式是不会帮我们生成别名的，需要我们自己定义，下面这种会帮我们生成默认的别名 users_online_* 这里要注意下，同时我们还是可以定义 as</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resurces </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	member </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		get </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:online</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">as:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;online&#39;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UsersController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> show</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		user_path(user)               </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># =&gt; /users/2                                路由相对路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		user_path(user.id)            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># =&gt; 2                                       路由参数ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    user_url(user)                </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># =&gt; http://localhost:3000/users/2           路由绝对路径</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="命名空间" tabindex="-1">命名空间 <a class="header-anchor" href="#命名空间" aria-label="Permalink to &quot;命名空间&quot;">​</a></h3><p>当项目比较大时，我们通常会将同业务类型的 Controller 放在同一个目录下，比如这里我们将所有用户相关的模块放在 controller → admin 目录下，我们则使用命令路由的方式访问 users_controller.rb 下面的 action (方法即是 action)</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># http://127.0.0.1/admin/users/:id</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这里的路由路径会是以 /admin 开头</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">namespace </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:admin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 如果我们不想在 URL 中显示 /admin 前缀，则可以使用下面这种方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scope </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;admin&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">module:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;admin&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者反之，我们想在 url 中显示 /admin 而不想把代码放在 admin 文件夹的命名空间中</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">scope </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/admin&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 文件路径: app -&gt; controller -&gt; admin -&gt; users_controller.rb</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 类的名称: Admin::UsersController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Admin::UsersController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> sign</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		....</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="嵌套路由" tabindex="-1">嵌套路由 <a class="header-anchor" href="#嵌套路由" aria-label="Permalink to &quot;嵌套路由&quot;">​</a></h3><p>每个用户对应着 1 个博客这种场景，我们就可以使用嵌套路由，注意 ：嵌入式路由不要超过 1 个层级</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:blogs</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># resources :blogs 默认也帮我们生成了多个路由如下，多了一个 user_id 路径参数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>HTTP Verb            Path                                           Controller</span></span>
<span class="line"><span>GET                  /users/:user_id/blogs(.:format)                blogs#index</span></span>
<span class="line"><span>POST                 /users/:user_id/blogs(.:format)                blogs#create</span></span>
<span class="line"><span>GET                  /users/:user_id/blogs/new(.:format)            blogs#new</span></span>
<span class="line"><span>GET                  /users/:user_id/blogs/:id/edit(.:format)       blogs#edit</span></span>
<span class="line"><span>GET                  /users/:user_id/blogs/:id(.:format)            blogs#show</span></span>
<span class="line"><span>PATCH                /users/:user_id/blogs/:id(.:format)            blogs#update</span></span>
<span class="line"><span>PUT                  /users/:user_id/blogs/:id(.:format)            blogs#update</span></span>
<span class="line"><span>DELETE               /users/:user_id/blogs/:id(.:format)            blogs#destory</span></span></code></pre></div><h3 id="定义-action-需要的种类-only" tabindex="-1">定义 action 需要的种类 (only) <a class="header-anchor" href="#定义-action-需要的种类-only" aria-label="Permalink to &quot;定义 action 需要的种类 (only)&quot;">​</a></h3><p>排除不需要的 action 请求方式，应为 resources 默认帮我们生成了 7 个 action，我们不需要这么多，我们可以使用 only 指定即可</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 这样仅仅只帮我们定义了 index，destory 两个 action 方式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">only:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:index</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:destory</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="action-是否需要参数-member" tabindex="-1">action 是否需要参数(member) <a class="header-anchor" href="#action-是否需要参数-member" aria-label="Permalink to &quot;action 是否需要参数(member)&quot;">​</a></h3><p>当我们自定义的 action，我们可以使用下面这种方式 member ，collection 指定是否需要参数</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# POST /users/:id/status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	member </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                    # member 英语是成员的意思，表示需要传入参数 id，返回指定 id 的成员数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		post </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		get </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:descrip</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">	# GET /users/online</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	collection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # collection 英语是集合的意思，表示不需要传入 id，返回一个列表数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		get </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:online</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 上面这种解释是采用 RESTful 的形式来解释的，其实就可以理解为需要传递参数的方式和不需要传递参数的方式</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># or</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 添加自定义的 RESTful 路由，也可以这样单个定义</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">resources </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:users</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	post </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:status</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :member</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	get  </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:online</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> :collection</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> UsersController</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ApplicationController</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> status</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		@id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> descript</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		@id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> params[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> online</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">		....</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">	end</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>Route Helper       HTTP Verb            URL                                Controller#Action</span></span>
<span class="line"><span>--------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>status_user        POST                 /users/:id/status(.:format)        users#status</span></span>
<span class="line"><span>descript_user      POST                 /users/:id/descript(.:format)      users#descript</span></span>
<span class="line"><span>online_users       GET                  /users/online(.:format)            users#online</span></span></code></pre></div><h3 id="non-resourcesful-routes" tabindex="-1">Non-Resourcesful Routes <a class="header-anchor" href="#non-resourcesful-routes" aria-label="Permalink to &quot;Non-Resourcesful Routes&quot;">​</a></h3><p>我们可以不指定 path 具体是哪一个控制器解析，直接使用 RESTful 规则</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># :action and :id are optional</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /photos/show/1</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /photos/show</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /photos # =&gt; index action</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:controller(/:action(/:id))&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># /photos/show/1/2</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 会帮我们自动解析查找 photos(controller)#show(action)/:id/:user_id</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;:controller/:action/:id/:user_id&#39;</span></span></code></pre></div><h3 id="同一个-action-声明多个请求类型-via" tabindex="-1">同一个 action 声明多个请求类型(via) <a class="header-anchor" href="#同一个-action-声明多个请求类型-via" aria-label="Permalink to &quot;同一个 action 声明多个请求类型(via)&quot;">​</a></h3><p>这种写法可以接受多个 http 类型请求 match via</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># GET  /photos</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># POST /photos</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">match </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;photos&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">to:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;photos#show&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">via:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:get</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:post</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span></code></pre></div><h3 id="定义统一的-controller-控制" tabindex="-1">定义统一的 controller 控制 <a class="header-anchor" href="#定义统一的-controller-控制" aria-label="Permalink to &quot;定义统一的 controller 控制&quot;">​</a></h3><p>这种声明方式表示下面声明的路径，必须都是使用的是 welcome 这个 controller 控制器下面的 action 进行了约束</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">controller </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">:welcome</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> do</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/welcome/hello&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          # =&gt; welcome#hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/welcome/sign&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           # =&gt; welcome#sign</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	get </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/welcome/descript&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       # =&gt; welcome#descript</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h3 id="拆分挂载模块" tabindex="-1">拆分挂载模块 <a class="header-anchor" href="#拆分挂载模块" aria-label="Permalink to &quot;拆分挂载模块&quot;">​</a></h3><p>就像命名空间一样，当项目特别大的时候，我们甚至可以拆分模块进行挂载使用</p><div class="language-ruby vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ruby</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">mount </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">AdminApp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">at:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/admin&#39;</span></span></code></pre></div>`,55),t=[e];function h(k,r,o,d,c,g){return i(),a("div",null,t)}const y=s(p,[["render",h]]);export{u as __pageData,y as default};
