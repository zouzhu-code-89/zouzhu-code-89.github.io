import{_ as s,c as a,o as i,a6 as n}from"./chunks/framework.DGW6KJB9.js";const g=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"document/services/linux/Docker容器引擎.md","filePath":"document/services/linux/Docker容器引擎.md"}'),e={name:"document/services/linux/Docker容器引擎.md"},p=n(`<h2 id="dockerfile-编写指南" tabindex="-1">Dockerfile 编写指南 <a class="header-anchor" href="#dockerfile-编写指南" aria-label="Permalink to &quot;Dockerfile 编写指南&quot;">​</a></h2><p>刚开始接触 docker 时大家基本都是通过 <code>docker pull</code>命令来拉取镜像，在此基础上 <code>docker exec/run</code>这些命令，进入容器做一些配置上的修改以此来构建一个容器，而Dockerfile就是一个一劳永益的构建镜像的方法，通过编写Dockerfile来定制自己的镜像。</p><p>说白了就是类似于 Python 项目的 requirements.txt 文件，你可以在里面写上自己需要的依赖包，然后安装构建自己项目的依赖</p><blockquote><p>requirements.txt =&gt; Dockerfile pip install =&gt; docker build</p></blockquote><p>Dockerfile 语法大致由以下几部分组成</p><ol><li><strong>FROM</strong> 它的妈妈是谁，基于哪个镜像来实现</li><li><strong>MAINTAINER</strong> 告诉别人，你创造了它，镜像的创建者 (维护者信息)</li><li><strong>ENV</strong> 声明环境变量</li><li><strong>RUN</strong> 你想让它干啥，执行的命令</li><li><strong>ADD</strong> 往它肚子里放点文件，添加宿主机文件到容器，有需要解压的文件会自动解压</li><li><strong>COPY</strong> 添加宿主机文件到容器里</li><li><strong>WORKDIR</strong> 我是 cd 到路径，今天刚化了妆 (当前工作目录)</li><li><strong>VOLUME</strong> 给我一个存放行李的地方，将宿主机的目录挂载到容器里 (目录挂载)</li><li><strong>EXPOSE</strong> 我要打开的门是啥，容器内应用可使用的端口</li><li><strong>CMD</strong> 容器启动后所执行的程序，如果执行 docker run 后面跟启动命令会被覆盖掉</li><li><strong>ENTRYPOINT</strong> 与 CMD 功能相同，但需 docker run 不会覆盖，如果需要覆盖可增加参数 --entrypoint 来覆盖</li></ol><h2 id="优雅的编写-dockerfile" tabindex="-1">优雅的编写 Dockerfile <a class="header-anchor" href="#优雅的编写-dockerfile" aria-label="Permalink to &quot;优雅的编写 Dockerfile&quot;">​</a></h2><p>为了方便大家了解，我们用两个 Dockerfile 实例进行简单的对比：</p><p>第一个 Dockerfile 的好处是，当正在执行的过程某一层出错，对其进行修正后再次 Build，前面已经执行完成的层不会再次执行，这样能大大减少下次Build 的时间，而它的问题就是会因层级变多了而使镜像占用的空间也变大</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>FROM ubuntu:16.04</span></span>
<span class="line"><span>RUN apt-get update</span></span>
<span class="line"><span>RUN apt-get install -y apt-utils libjpeg-dev \\   </span></span>
<span class="line"><span>python-pip</span></span>
<span class="line"><span>RUN pip install --upgrade pip</span></span>
<span class="line"><span>RUN easy_install -U setuptools</span></span>
<span class="line"><span>RUN apt-get clean</span></span></code></pre></div><p>第二个 Dockerfile 把所有的组件全部在一层解决，这样做能一定程度上减少镜像的占用空间，但在制作基础镜像的时候若其中某个组编译出错，修正后再次 Build 就相当于重头再来了，前面编译好的组件在一个层里，得全部都重新编译一遍，比较消耗时间</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>FROM ubuntu:16.04</span></span>
<span class="line"><span>RUN apt-get update &amp;&amp; apt-get install -y apt-utils \\</span></span>
<span class="line"><span>  libjpeg-dev python-pip \\</span></span>
<span class="line"><span>           &amp;&amp; pip install --upgrade pip \\</span></span>
<span class="line"><span>      &amp;&amp; easy_install -U setuptools \\</span></span>
<span class="line"><span>    &amp;&amp; apt-get clean</span></span></code></pre></div><p>从下表可以看出两个Dockerfile所编译出来的镜像大小：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>$ docker images | grep ubuntu</span></span>
<span class="line"><span>REPOSITORY      TAG      IMAGE ID       CREATED     SIZE</span></span>
<span class="line"><span>ubuntu          16.04    9361ce633ff1  1 days ago  422MB</span></span>
<span class="line"><span>ubuntu          16.04-1  3f5b979df1a9  1 days ago  412MB</span></span></code></pre></div><p>呃…. 好像并没有特别的效果，但若Dockerfile非常长的话可以考虑减少层次，因为Dockerfile最高只能有127层</p><h2 id="dockerfile-镜像打包" tabindex="-1">Dockerfile 镜像打包 <a class="header-anchor" href="#dockerfile-镜像打包" aria-label="Permalink to &quot;Dockerfile 镜像打包&quot;">​</a></h2><p>-t 代表打包，image_name 镜像的名称，tag 标签名，&quot;.&quot; Dockerfile 的目录，表示当前目录</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>docker build -t image_name:tag .</span></span>
<span class="line"><span></span></span>
<span class="line"><span>docker build -t polymerization:v1.0 .</span></span></code></pre></div><p>镜像打包完成后，查看镜像列表就有 polymerization:v1.0 这个新的镜像了</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>(base) 192:Polymerization no.11$ docker images</span></span>
<span class="line"><span>REPOSITORY                               TAG       IMAGE ID       CREATED              SIZE</span></span>
<span class="line"><span>polymerization                           v1.0      4490e90d6836   About a minute ago   1.05GB</span></span>
<span class="line"><span>ghcr.io/tomayac/local-reverse-geocoder   latest    8fca3b6367a0   3 months ago         2.37GB</span></span>
<span class="line"><span>mysql                                    latest    667ee8fb158e   17 months ago        521MB</span></span>
<span class="line"><span>docker/getting-started                   latest    bd9a9f733898   19 months ago        28.8MB</span></span>
<span class="line"><span>mongo                                    latest    5285cb69ea55   19 months ago        698MB</span></span>
<span class="line"><span>sriharism/mangodb                        latest    1e7dcf949c0a   6 years ago          394MB</span></span></code></pre></div><h2 id="docker-compose" tabindex="-1">docker-compose <a class="header-anchor" href="#docker-compose" aria-label="Permalink to &quot;docker-compose&quot;">​</a></h2><p>Docker 是一个容器化平台，用于构建、运行和管理容器，将应用程序和其依赖项打包到可移植的容器中。<br> Docker Compose 是一个工具，用于定义和管理多个 Docker 容器，通过一个配置文件指定容器的属性、依赖关系和通信方式，简化多容器应用程序的部署和管理过程。</p><h3 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h3><p>启动服务：docker-compose up -d<br> 停止服务：docker-compose down<br> 列出所有运行的容器：docker-compose ps<br> 查看服务的日志：docker-compose logs<br> 重新构建服务：docker-compose build<br> 启动服务：docker-compose start<br> 停止已运行的服务：docker-compose stop<br> 重启服务：docker-compose restart</p><h3 id="yaml-配置文件" tabindex="-1">yaml 配置文件 <a class="header-anchor" href="#yaml-配置文件" aria-label="Permalink to &quot;yaml 配置文件&quot;">​</a></h3><p>Docker Compose 的 YAML 文件包含 4 个一级 key:(version、services、networks、volumes)</p><ul><li>version 是必须指定的，而且总是位于文件的第一行，它定义了 Compose 文件格式(主要是 API)的版本，注意 version 并非定义 Docker Compose 或 Docker 引擎的版本号</li><li>services 用于定义不同的应用服务，上边的例子定义了两个服务:一个名为 lagou-mysql 数据库服务以及一个名为 lagou-eureka 的微服，Docker Compose 会将每个服务部署在各自的容器中</li><li>networks 用于指引 Docker 创建新的网络 ！默认情况下 Docker Compose 会创建 bridge 网络，这是一种单主机网络，只能够实现同一主机上容器的连接，当然，也可以使用 driver 属性来指定不同的网络类型</li><li>volumes 用于指引 Docker 来创建新的卷</li></ul><div class="language-yml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;3&#39;</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">services</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  mysql</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    environment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      MYSQL_ROOT_PASSWORD</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">admin</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">/data/edu-bom/mysql/test:/var/lib/mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql/mysql:5.7</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">3306:3306</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  eureka</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    build</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      context</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">./edu-eureka-boot</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    restart</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">always</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    ports</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">8761:8761</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    container_name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">edu-eureka-boot</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    hostname</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">edu-eureka-boot</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    image</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">edu/edu-eureka-boot:1.0</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    depends_on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">mysql</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">      net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">networks</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    net</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">volumes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    vol</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div>`,28),l=[p];function t(k,h,o,r,c,d){return i(),a("div",null,l)}const y=s(e,[["render",t]]);export{g as __pageData,y as default};
