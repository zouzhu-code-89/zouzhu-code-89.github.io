import{_ as l,E as t,c as p,b as o,w as a,bf as r,m as s,a as i,a4 as c,o as n,J as h}from"./chunks/framework.DOBBHlqS.js";const x=JSON.parse('{"title":"Linux服务管理命令 service 与 systemctl","description":null,"frontmatter":{"title":"Linux服务管理命令 service 与 systemctl","description":null,"time":"2025-04-02 18:35","category":"linux","tag":"服务管理|linux"},"headers":[],"relativePath":"notes/20250402_18_35.md","filePath":"notes/20250402_18_35.md"}'),d={name:"notes/20250402_18_35.md"},E=s("h2",{id:"systemd-介绍",tabindex:"-1"},[i("Systemd 介绍 "),s("a",{class:"header-anchor",href:"#systemd-介绍","aria-label":'Permalink to "Systemd 介绍"'},"​")],-1),u=s("p",null,"Systemd 是 Linux 系统工具，用来启动守护进程，已成为大多数发行版的标准配置。Systemd 它的设计目标是为系统的启动和管理提供一套完整的解决方案。根据 Linux 惯例，字母 d 是守护进程（daemon）的缩写，Systemd 这个名字的含义，就是它要守护整个系统。",-1),k=s("ul",null,[s("li",null,[s("p",null,"CentOS 7 使用 Systemd 替换了SysV")]),s("li",null,[s("p",null,"Ubuntu 从 15.04 开始使用 Systemd")])],-1),m=c(`<h3 id="unit" tabindex="-1">Unit <a class="header-anchor" href="#unit" aria-label="Permalink to &quot;Unit&quot;">​</a></h3><p>在 systemd 中，Unit 是系统中受 systemd 管理的基本对象。它表示一个资源或服务的配置单元，systemd 使用这些单元来启动、停止、监控和管理系统的各种资源和服务。<br> Unit 是 systemd 的核心概念，用于定义和管理系统中的各种资源和服务。通过不同类型的 Unit 文件，systemd 可以灵活地控制服务、挂载点、定时任务等系统资源。<br> systemd 中的 Unit 有多种类型，每种类型对应不同的资源或服务，常见的 Unit 类型包括：</p><ol><li><p><strong>服务单元（Service Unit）</strong>：用于定义和管理系统服务。</p><ul><li>文件扩展名：<code>.service</code></li><li>示例：<code>nginx.service</code></li></ul></li><li><p><strong>目标单元（Target Unit）</strong>：用于分组其他 Unit，类似于运行级别。</p><ul><li>文件扩展名：<code>.target</code></li><li>示例：<code>multi-user.target</code></li></ul></li><li><p><strong>挂载单元（Mount Unit）</strong>：用于定义文件系统的挂载点。</p><ul><li>文件扩展名：<code>.mount</code></li><li>示例：<code>home.mount</code></li></ul></li><li><p><strong>套接字单元（Socket Unit）</strong>：用于定义套接字文件，通常与 <code>.service</code> 配合使用。</p><ul><li>文件扩展名：<code>.socket</code></li><li>示例：<code>docker.socket</code></li></ul></li><li><p><strong>计时器单元（Timer Unit）</strong>：用于定义定时任务，类似于 <code>cron</code>。</p><ul><li>文件扩展名：<code>.timer</code></li><li>示例：<code>backup.timer</code></li></ul></li><li><p><strong>设备单元（Device Unit）</strong>：用于管理设备节点。</p><ul><li>文件扩展名：<code>.device</code></li><li>示例：<code>dev-sda.device</code></li></ul></li><li><p><strong>路径单元（Path Unit）</strong>：用于监控文件或目录的变化。</p><ul><li>文件扩展名：<code>.path</code></li><li>示例：<code>myapp.path</code></li></ul></li><li><p><strong>交换单元（Swap Unit）</strong>：用于管理交换分区或交换文件。</p><ul><li>文件扩展名：<code>.swap</code></li><li>示例：<code>swapfile.swap</code></li></ul></li><li><p><strong>网络单元（Network Unit）</strong>：用于管理网络接口。</p><ul><li>文件扩展名：<code>.network</code></li><li>示例：<code>eth0.network</code></li></ul></li></ol><h3 id="job" tabindex="-1">Job <a class="header-anchor" href="#job" aria-label="Permalink to &quot;Job&quot;">​</a></h3><p>在 systemd 中，Jobs 是指 systemd 正在处理的任务或操作，这些任务通常是启动、停止、重启或重新加载某个单元（Unit）的请求。<br> Jobs 的作用，当你使用 systemctl 命令对某个单元执行操作（如启动或停止服务）时，systemd 会将这些操作排入队列，并将其视为一个 Job，systemd 会按照依赖关系和优先级来处理这些 Jobs。</p><p>Jobs 的状态</p><ul><li><strong>Queued</strong>：表示当前有多少 Jobs 在队列中等待处理。</li><li><strong>Running</strong>：表示当前正在执行的 Jobs。</li></ul><h2 id="service-服务管理文件" tabindex="-1">.service 服务管理文件 <a class="header-anchor" href="#service-服务管理文件" aria-label="Permalink to &quot;.service 服务管理文件&quot;">​</a></h2><h3 id="配置-service-文件" tabindex="-1">配置 .service 文件 <a class="header-anchor" href="#配置-service-文件" aria-label="Permalink to &quot;配置 .service 文件&quot;">​</a></h3><p>1111</p><h3 id="重新载入配置" tabindex="-1">重新载入配置 <a class="header-anchor" href="#重新载入配置" aria-label="Permalink to &quot;重新载入配置&quot;">​</a></h3><p>将配置好的 .service 文件移入 /etc/systemd/system 目录，并重载 systemd 配置。</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">sudo</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> systemctl daemon-reload</span></span></code></pre></div><h3 id="查看服务配置文件路径" tabindex="-1">查看服务配置文件路径 <a class="header-anchor" href="#查看服务配置文件路径" aria-label="Permalink to &quot;查看服务配置文件路径&quot;">​</a></h3><p>查找服务的具体配置文件路径</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">systemctl</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> show puma.service --property=FragmentPath</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># FragmentPath=/etc/systemd/system/puma.service</span></span></code></pre></div><h3 id="systemd-web-server-配置用例" tabindex="-1">Systemd web server 配置用例 <a class="header-anchor" href="#systemd-web-server-配置用例" aria-label="Permalink to &quot;Systemd web server 配置用例&quot;">​</a></h3><h4 id="puma-配置用例" tabindex="-1">puma 配置用例 <a class="header-anchor" href="#puma-配置用例" aria-label="Permalink to &quot;puma 配置用例&quot;">​</a></h4><div class="language-tex vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tex</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Unit]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 服务的描述信息</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Description=Puma HTTP Server</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 指定服务启动的顺序，表示当前服务需要在指定服务之后启动</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">After=network.target</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 指定当前服务依赖的其他服务。如果依赖的服务未启动，当前服务也无法启动。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Requires=puma.socket</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Service]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Puma supports systemd&#39;s \`Type=notify\` and watchdog service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># monitoring, as of Puma 5.1 or later.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># On earlier versions of Puma or JRuby, change this to \`Type=simple\` and remove</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># the \`WatchdogSec\` line.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Type=notify</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 定义服务的看门狗超时时间，如果服务未在指定时间内响应，systemd 会重启服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WatchdogSec=10</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 指定运行服务的用户</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># User=</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">User=ubuntu</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 指定服务运行的工作目录，应用程序代码根目录的路径</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Also replace the &quot;&lt;YOUR_APP_PATH&gt;&quot; placeholders below with this path.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Example /home/username/myapp</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WorkingDirectory=/home/ubuntu/rails_product</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 设置环境变量</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Environment=&quot;RAILS_ENV=production&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 定义启动服务时执行的命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># SystemD will not run puma even if it is in your path. You must specify</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># an absolute URL to puma. For example /usr/local/bin/puma</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># Alternatively, create a binstub with \`bundle binstubs puma --path ./sbin\` in the WorkingDirectory</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ExecStart=/home/ubuntu/.rbenv/shims/bundle exec puma -C /home/ubuntu/rails_product/config/puma.rb -b tcp://0.0.0.0:8080</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"># 定义服务失败时的重启策略</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Restart=always</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[Install]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">WantedBy=multi-user.target</span></span></code></pre></div><h4 id="uvicorn-配置用例" tabindex="-1">uvicorn 配置用例 <a class="header-anchor" href="#uvicorn-配置用例" aria-label="Permalink to &quot;uvicorn 配置用例&quot;">​</a></h4><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>[Unit]</span></span>
<span class="line"><span>Description=fastapi_service</span></span>
<span class="line"><span>After=network.target</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Service]</span></span>
<span class="line"><span>User=ubuntu</span></span>
<span class="line"><span>WorkingDirectory=/home/ubuntu/fastapi_service</span></span>
<span class="line"><span>ExecStart=/home/ubuntu/.local/bin/pipenv run python3 /home/ubuntu/fastapi_service/main.py</span></span>
<span class="line"><span>Environment=&quot;PATH=/home/ubuntu/.pipenv/bin:$PATH&quot;</span></span>
<span class="line"><span>Restart=always</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[Install]</span></span>
<span class="line"><span>WantedBy=multi-user.target</span></span></code></pre></div>`,21);function g(y,b,v,_,A,f){const e=t("Mermaid");return n(),p("div",null,[E,u,k,(n(),o(r,null,{default:a(()=>[h(e,{id:"mermaid-18",class:"mermaid",graph:"graph%20LR%0A%20%20%20%20B(Linux%20System)%0A%20%20%20%20A(Systemd)%0A%20%20%20%20A%20--Unit%20%E6%98%AF%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%8F%97%20systemd%20%E7%AE%A1%E7%90%86%E7%9A%84%E5%9F%BA%E6%9C%AC%E5%AF%B9%E8%B1%A1--%3E%201((Unit))%0A%20%20%20%20A%20--Job%E9%80%9A%E5%B8%B8%E6%8C%87%E5%90%AF%E5%8A%A8%2C%E5%81%9C%E6%AD%A2%2C%E9%87%8D%E5%90%AF%E6%88%96%E9%87%8D%E6%96%B0%E5%8A%A0%E8%BD%BD%E6%9F%90%E4%B8%AA%E5%8D%95%E5%85%83%20Unit%20%E7%9A%84%E8%AF%B7%E6%B1%82--%3E%202((Job))%0A%0A%20%20%20%201%20--%3E%20B%0A%20%20%20%202%20--%E8%BF%90%E8%A1%8C%E5%AE%8C%E6%88%90--%3E%201%0A"})]),fallback:a(()=>[i(" Loading... ")]),_:1})),m])}const B=l(d,[["render",g]]);export{x as __pageData,B as default};
